AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    EndpointConfiguration: REGIONAL
    Cors:
      AllowMethods: "'*'"
      # For example, "'GET,POST,DELETE'". If you omit this property, then SAM will automatically allow all the methods configured for each API.
      # Checkout [HTTP Spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods) more details on the value.

      AllowHeaders: "'*'"
      # For example, "'X-Forwarded-For'". Checkout [HTTP Spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers) for more details on the value

      # AllowOrigin: "'https://aiofeed.com'"
      AllowOrigin: "'*'"
      # AllowOrigin: "'*'"
      # For example, "'www.example.com'". Checkout [HTTP Spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) for more details on this value.
      # MaxAge: Optional. String containing the number of seconds to cache CORS Preflight request.
      # # For example, "'600'" will cache request for 600 seconds. Checkout [HTTP Spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age) for more details on this value
      # AllowCredentials: true
      # Header is omitted when false. Checkout [HTTP Spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials) for more details on this value.
  Function:
    Runtime: nodejs18.x
    CodeUri: '.'
Resources:
  UserLogins:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Username
          AttributeType: S
      KeySchema:
        - AttributeName: Username
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  TwitchData:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  ChatStates:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: channel_id
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: channel_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  YoutubeData:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  TwitterData:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  SavedLists:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  AppInfo:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  CustomFeedSections:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  TwitchVodChannels:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: channel_id
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: channel_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  NotisChannelsUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update channel list (channels with updated title/game notifications enabled.).'
      Handler: notisChannelsUpdate/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
          TWITCH_DATA_TABLE: !Ref TwitchData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
            TableName: !Ref TwitchData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch/update-notis-channels
            Method: put
          RequestParameters:
            - method.request.querystring.channels:
                Required: true
  DeleteAccount:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Delete an account'
      Handler: deleteAccount/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
          TWITCH_DATA_TABLE: !Ref TwitchData
          YOUTUBE_DATA_TABLE: !Ref YoutubeData
          SAVED_LISTS: !Ref SavedLists
          CUSTOM_FEED_SECTIONS: !Ref CustomFeedSections
          TWITTER_DATA_TABLE: !Ref TwitterData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
            TableName: !Ref TwitchData
            TableName: !Ref YoutubeData
            TableName: !Ref SavedLists
            TableName: !Ref CustomFeedSections
            TableName: !Ref TwitterData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /account
            Method: delete
            RequestParameters:
              - method.request.querystring.username:
                  Required: true
              - method.request.querystring.password:
                  Required: true
  ReAuthenticateTwitch:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Re-authenticate Twitch user to Twitch with refresh token (returns access & refresh tokens).'
      Handler: reAuthenticateTwitch/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
          TWITCH_DATA_TABLE: !Ref TwitchData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
            TableName: !Ref TwitchData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch/reauth
            Method: put
          RequestParameters:
            - method.request.querystring.refresh_token:
                Required: true
  RequestTwitchTokens:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Re-authenticate Twitch user to Twitch with authorization code (returns access & refresh tokens).'
      Handler: requestTwitchTokens/handler.handler
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch/request_auth
            Method: put
          RequestParameters:
            - method.request.querystring.authCode:
                Required: true
  YoutubeFetchTokens:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Exchange an authorization code for an access and refresh token'
      Handler: YoutubeFetchTokens/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
          YOUTUBE_DATA_TABLE: !Ref YoutubeData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
            TableName: !Ref YoutubeData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /youtube/token
            Method: post
          RequestParameters:
            - method.request.querystring.authCode:
  DeleteYotubeData:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Delete all Youtube data associated with the account.'
      Handler: DeleteYoutubeData/handler.handler
      Environment:
        Variables:
          YOUTUBE_DATA_TABLE: !Ref YoutubeData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref YoutubeData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /youtube/token
            Method: delete
  DeleteTwitchData:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Deletes all Twitch user data associated with the account.'
      Handler: DeleteTwitchData/handler.handler
      Environment:
        Variables:
          TWITCH_DATA_TABLE: !Ref TwitchData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TwitchData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch/user
            Method: delete
  UpdateSavedLists:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update custom saved lists.'
      Handler: savedListsUpdate/handler.handler
      Environment:
        Variables:
          SAVED_LISTS: !Ref SavedLists
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SavedLists
      Events:
        Http:
          Type: Api
          Properties:
            Path: /savedlists
            Method: put
          RequestParameters:
            - method.request.querystring.obj:
                Required: true
            - method.request.querystring.id:
                Required: true
  CreateSavedLists:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Create custom saved lists.'
      Handler: savedListsCreate/handler.handler
      Environment:
        Variables:
          SAVED_LISTS: !Ref SavedLists
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SavedLists
      Events:
        Http:
          Type: Api
          Properties:
            Path: /savedlists
            Method: post
          RequestParameters:
            - method.request.querystring.obj:
                Required: true
            - method.request.querystring.id:
                Required: true
  FetchSavedLists:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Fetch custom saved lists.'
      Handler: savedListsFetch/handler.handler
      Environment:
        Variables:
          SAVED_LISTS: !Ref SavedLists
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SavedLists
      Events:
        Http:
          Type: Api
          Properties:
            Path: /savedlists
            Method: get
  DeleteSavedLists:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Delete custom saved lists.'
      Handler: savedListsDelete/handler.handler
      Environment:
        Variables:
          SAVED_LISTS: !Ref SavedLists
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SavedLists
      Events:
        Http:
          Type: Api
          Properties:
            Path: /savedlists/delete
            Method: put
          RequestParameters:
            - method.request.querystring.id:
                Required: true
            # - method.request.querystring.videosObj:
            #     Required: true
  FetchAppAccessToken:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Returns App access token and if not avalible fetches new App token and saves it and returns it.'
      Handler: fetchAppAccessToken/handler.handler
      Environment:
        Variables:
          APPINFO_TABLE: !Ref AppInfo
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppInfo
      Events:
        Http:
          Type: Api
          Properties:
            Path: /app/token
            Method: get
  favoriteStreamsUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update favorite marked streams list.'
      Handler: favoriteStreamsUpdate/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
          TWITCH_DATA_TABLE: !Ref TwitchData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
            TableName: !Ref TwitchData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch/favorite_streams
            Method: put
          RequestParameters:
            - method.request.querystring.channels:
                Required: true
  CreateCustomFeedSections:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Create custom feed section.'
      Handler: customFeedSectionsCreate/handler.handler
      Environment:
        Variables:
          CUSTOM_FEED_SECTIONS: !Ref CustomFeedSections
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CustomFeedSections
      Events:
        Http:
          Type: Api
          Properties:
            Path: /custom_feed_sections
            Method: post
          RequestParameters:
            - method.request.querystring.data:
                Required: true
            - method.request.querystring.id:
                Required: true
  UpdateCustomFeedSections:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update custom feed sections.'
      Handler: customFeedSectionsUpdate/handler.handler
      Environment:
        Variables:
          CUSTOM_FEED_SECTIONS: !Ref CustomFeedSections
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CustomFeedSections
      Events:
        Http:
          Type: Api
          Properties:
            Path: /custom_feed_sections
            Method: put
          RequestParameters:
            - method.request.querystring.data:
                Required: true
            - method.request.querystring.id:
                Required: true
  FetchCustomFeedSections:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Fetch custom feed sections.'
      Handler: customFeedSectionsFetch/handler.handler
      Environment:
        Variables:
          CUSTOM_FEED_SECTIONS: !Ref CustomFeedSections
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CustomFeedSections
      Events:
        Http:
          Type: Api
          Properties:
            Path: /custom_feed_sections
            Method: get
  DeleteCustomFeedSections:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Delete custom feed sections.'
      Handler: customFeedSectionsDelete/handler.handler
      Environment:
        Variables:
          CUSTOM_FEED_SECTIONS: !Ref CustomFeedSections
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CustomFeedSections
      Events:
        Http:
          Type: Api
          Properties:
            Path: /custom_feed_sections
            Method: delete
          RequestParameters:
            - method.request.querystring.id:
                Required: true
            # - method.request.querystring.videosObj:
            #     Required: true
  YoutubeUserDataUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update Youtube user data.'
      Handler: youtubeUserDataUpdate/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
          YOUTUBE_DATA_TABLE: !Ref YoutubeData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
            TableName: !Ref YoutubeData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /youtube/user
            Method: put
          RequestParameters:
            - method.request.querystring.data:
            - method.request.querystring.access_token:
            - method.request.querystring.refresh_token:
  TwitchUserDataUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update Twitch user data.'
      Handler: twitchUserDataUpdate/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
          TWITCH_DATA_TABLE: !Ref TwitchData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
            TableName: !Ref TwitchData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch/user
            Method: put
          RequestParameters:
            - method.request.querystring.data:
            - method.request.querystring.access_token:
            - method.request.querystring.refresh_token:
  TwitchDataFetch:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Fetch all data from Twitch table.'
      Handler: twitchDataFetch/handler.handler
      Environment:
        Variables:
          TWITCH_DATA_TABLE: !Ref TwitchData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TwitchData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch
            Method: get
  YoutubeDataFetch:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Fetch all data from Youtube table.'
      Handler: youtubeDataFetch/handler.handler
      Environment:
        Variables:
          YOUTUBE_DATA_TABLE: !Ref YoutubeData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref YoutubeData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /youtube
            Method: get
  TwitterDataFetch:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Fetch all data from Twitter table.'
      Handler: twitterDataFetch/handler.handler
      Environment:
        Variables:
          TWITTER_DATA_TABLE: !Ref TwitterData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TwitterData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitter
            Method: get
  TwitterDataUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update Twitter user data.'
      Handler: twitterDataUpdate/handler.handler
      Environment:
        Variables:
          TWITTER_DATA_TABLE: !Ref TwitterData
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TwitterData
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitter
            Method: put
          RequestParameters:
            - method.request.querystring.data:
  ChatStatesFetch:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Fetch chat state for a specific channel'
      Handler: chatStatesFetch/handler.handler
      Environment:
        Variables:
          CHAT_STATES_TABLE: !Ref ChatStates
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatStates
      Events:
        Http:
          Type: Api
          Properties:
            Path: /chatstates
            Method: get
          RequestParameters:
            - method.request.querystring.channel_id:
                Required: true
  ChatStatesUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update chat state for a specific channel'
      Handler: chatStatesUpdate/handler.handler
      Environment:
        Variables:
          CHAT_STATES_TABLE: !Ref ChatStates
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatStates
      Events:
        Http:
          Type: Api
          Properties:
            Path: /chatstates
            Method: put
          RequestParameters:
            - method.request.querystring.data:
            - method.request.querystring.channel_id:
                Required: true
  ChatStatesDelete:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Delete chat state for a specific channel'
      Handler: chatStatesDelete/handler.handler
      Environment:
        Variables:
          CHAT_STATES_TABLE: !Ref ChatStates
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatStates
      Events:
        Http:
          Type: Api
          Properties:
            Path: /chatstates
            Method: delete
          RequestParameters:
            - method.request.querystring.channel_id:
                Required: true
  TwitchVodChannelsFetch:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Fetch monitored vod channels list.'
      Handler: Twitch/Vods/Fetch/handler.handler
      Environment:
        Variables:
          TWITCH_VOD_TABLE: !Ref TwitchVodChannels
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TwitchVodChannels
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch/vod-channels
            Method: get
  TwitchVodChannelsCreate:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Add to monitored vod channels list.'
      Handler: Twitch/Vods/Create/handler.handler
      Environment:
        Variables:
          TWITCH_VOD_TABLE: !Ref TwitchVodChannels
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TwitchVodChannels
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch/vod-channels
            Method: put
          RequestParameters:
            - method.request.querystring.channel_id:
                Required: true
  TwitchVodChannelsDelete:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Delete from monitored vod channels list.'
      Handler: Twitch/Vods/Delete/handler.handler
      Environment:
        Variables:
          TWITCH_VOD_TABLE: !Ref TwitchVodChannels
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TwitchVodChannels
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch/vod-channels
            Method: delete
          RequestParameters:
            - method.request.querystring.channel_id:
                Required: true
