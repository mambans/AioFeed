AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    EndpointConfiguration: REGIONAL
    Cors:
      AllowMethods: "'*'"
      # For example, "'GET,POST,DELETE'". If you omit this property, then SAM will automatically allow all the methods configured for each API.
      # Checkout [HTTP Spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Methods) more details on the value.

      AllowHeaders: "'*'"
      # For example, "'X-Forwarded-For'". Checkout [HTTP Spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Headers) for more details on the value

      # AllowOrigin: "'https://aiofeed.com'"
      AllowOrigin: "'*'"
      # AllowOrigin: "'*'"
      # For example, "'www.example.com'". Checkout [HTTP Spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin) for more details on this value.
      # MaxAge: Optional. String containing the number of seconds to cache CORS Preflight request.
      # # For example, "'600'" will cache request for 600 seconds. Checkout [HTTP Spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Max-Age) for more details on this value
      # AllowCredentials: true
      # Header is omitted when false. Checkout [HTTP Spec](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials) for more details on this value.
  Function:
    Runtime: nodejs10.x
    CodeUri: '.'
Resources:
  UserLogins:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Username
          AttributeType: S
      KeySchema:
        - AttributeName: Username
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  Login:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Login with AioFeed account and return account info, tokens and monitored vod channels.'
      Handler: login/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /account/login
            Method: post
            RequestParameters:
              - method.request.querystring.username:
                  Required: true
              - method.request.querystring.password:
                  Required: true
  Create:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Create an AioFeed account with tokens and monitored vod channels default to null and empty array.'
      Handler: create/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /account/create
            Method: post
            RequestParameters:
              - method.request.querystring.username:
                  Required: true
              - method.request.querystring.email:
                  Required: true
              - method.request.querystring.password:
                  Required: true
  Update:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update a specific column mentioned as a param.'
      Handler: update/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /account/update
            Method: put
          RequestParameters:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.columnValue:
                Required: true
            - method.request.querystring.columnName:
                Required: true
            - method.request.querystring.authkey:
                Required: true
  SoftUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update a specific column mentioned as a param but merge it with its current value.'
      Handler: softUpdate/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /account/soft-update
            Method: put
          RequestParameters:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.columnValue:
                Required: true
            - method.request.querystring.columnName:
                Required: true
            - method.request.querystring.authkey:
                Required: true
  VodChannelsUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update monitored vod channels list.'
      Handler: vodChannelsUpdate/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /vodchannels
            Method: put
          RequestParameters:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.channels:
                Required: true
            - method.request.querystring.authkey:
                Required: true
  UpdateNotisChannelsUpdate:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update channel list (channels with updated title/game notifications enabled.).'
      Handler: updateNotisChannelsUpdate/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /updatechannels
            Method: put
          RequestParameters:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.channels:
                Required: true
            - method.request.querystring.authkey:
                Required: true
  PreferencesFetchAll:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Fetch all preferences.'
      Handler: preferencesFetchAll/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /preferences
            Method: get
            RequestParameters:
              - method.request.querystring.username:
                  Required: true
              - method.request.querystring.authkey:
                  Required: true
  DeleteAccount:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Delete an account'
      Handler: deleteAccount/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /account
            Method: delete
            RequestParameters:
              - method.request.querystring.username:
                  Required: true
              - method.request.querystring.password:
                  Required: true
              - method.request.querystring.authkey:
                  Required: true
  ReAuthenticateTwitch:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Re-authenticate Twitch user to Twitch with refresh token (returns access & refresh tokens).'
      Handler: reAuthenticateTwitch/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /reauth/twitch
            Method: put
          RequestParameters:
            - method.request.querystring.refresh_token:
                Required: true
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.authkey:
                Required: true
  RequestTwitchTokens:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Re-authenticate Twitch user to Twitch with authorization code (returns access & refresh tokens).'
      Handler: requestTwitchTokens/handler.handler
      Events:
        Http:
          Type: Api
          Properties:
            Path: /rerequest/twitch
            Method: put
          RequestParameters:
            - method.request.querystring.authCode:
                Required: true
  AppInfo:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  YoutubeFetchTokens:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Exchange an authorization code for an access and refresh token'
      Handler: YoutubeFetchTokens/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /youtube/token
            Method: post
          RequestParameters:
            - method.request.querystring.authCode:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.authkey:
                Required: true
  DeleteYotubeData:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Delete all Youtube data associated with the account.'
      Handler: DeleteYoutubeData/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /youtube/token
            Method: delete
          RequestParameters:
            - method.request.querystring.authkey:
                Required: true
            - method.request.querystring.username:
                Required: true
  DeleteTwitchData:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Deletes all Twitch data associated with the account.'
      Handler: DeleteTwitchData/handler.handler
      Environment:
        Variables:
          USERNAME_TABLE: !Ref UserLogins
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserLogins
      Events:
        Http:
          Type: Api
          Properties:
            Path: /twitch/token
            Method: delete
          RequestParameters:
            - method.request.querystring.authkey:
                Required: true
            - method.request.querystring.username:
                Required: true
  SavedLists:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Username
          AttributeType: S
      KeySchema:
        - AttributeName: Username
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  UpdateSavedLists:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Update custom saved lists.'
      Handler: savedListsUpdate/handler.handler
      Environment:
        Variables:
          SAVED_LISTS: !Ref SavedLists
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SavedLists
      Events:
        Http:
          Type: Api
          Properties:
            Path: /savedlists
            Method: put
          RequestParameters:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.videosObj:
                Required: true
            - method.request.querystring.listName:
                Required: true
  FetchSavedLists:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Fetch custom saved lists.'
      Handler: savedListsFetch/handler.handler
      Environment:
        Variables:
          SAVED_LISTS: !Ref SavedLists
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SavedLists
      Events:
        Http:
          Type: Api
          Properties:
            Path: /savedlists
            Method: get
          RequestParameters:
            - method.request.querystring.username:
                Required: true
            # - method.request.querystring.videosObj:
            #     Required: true
            # - method.request.querystring.listName:
            #     Required: true
  DeleteSavedLists:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Delete custom saved lists.'
      Handler: savedListsDelete/handler.handler
      Environment:
        Variables:
          SAVED_LISTS: !Ref SavedLists
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SavedLists
      Events:
        Http:
          Type: Api
          Properties:
            Path: /savedlists/delete
            Method: put
          RequestParameters:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.listName:
                Required: true
            # - method.request.querystring.videosObj:
            #     Required: true
  FetchAppAccessToken:
    Type: AWS::Serverless::Function
    Properties:
      Description: 'Returns App access token and if not avalible fetches new App token and saves it and returns it.'
      Handler: fetchAppAccessToken/handler.handler
      Environment:
        Variables:
          APPINFO_TABLE: !Ref AppInfo
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppInfo
      Events:
        Http:
          Type: Api
          Properties:
            Path: /app/token
            Method: get
