AWSTemplateFormatVersion: '2010-09-09'
Globals:
  Api:
    Cors:
      AllowHeaders: '''*'''
      AllowMethods: '''*'''
      AllowOrigin: '''https://aiofeed.com'''
    EndpointConfiguration: REGIONAL
Resources:
  AppInfo:
    Properties:
      AttributeDefinitions:
      - AttributeName: Name
        AttributeType: S
      KeySchema:
      - AttributeName: Name
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  Create:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Create an AioFeed account with tokens and monitored vod channels
        default to null and empty array.
      Environment:
        Variables:
          USERNAME_TABLE:
            Ref: UserLogins
      Events:
        Http:
          Properties:
            Method: post
            Path: /account/create
            RequestParameters:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.email:
                Required: true
            - method.request.querystring.password:
                Required: true
          Type: Api
      Handler: create/handler.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserLogins
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  DeleteAccount:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Delete an account
      Environment:
        Variables:
          USERNAME_TABLE:
            Ref: UserLogins
      Events:
        Http:
          Properties:
            Method: delete
            Path: /account
            RequestParameters:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.password:
                Required: true
            - method.request.querystring.authkey:
                Required: true
          Type: Api
      Handler: deleteAccount/handler.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserLogins
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  DeleteTwitchData:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Deletes all Twitch data associated with the account.
      Environment:
        Variables:
          USERNAME_TABLE:
            Ref: UserLogins
      Events:
        Http:
          Properties:
            Method: delete
            Path: /twitch/token
          RequestParameters:
          - method.request.querystring.authkey:
              Required: true
          - method.request.querystring.username:
              Required: true
          Type: Api
      Handler: DeleteTwitchData/handler.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserLogins
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  DeleteYotubeData:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Delete all Youtube data associated with the account.
      Environment:
        Variables:
          USERNAME_TABLE:
            Ref: UserLogins
      Events:
        Http:
          Properties:
            Method: delete
            Path: /youtube/token
          RequestParameters:
          - method.request.querystring.authkey:
              Required: true
          - method.request.querystring.username:
              Required: true
          Type: Api
      Handler: DeleteYoutubeData/handler.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserLogins
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  Login:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Login with AioFeed account and return account info, tokens and
        monitored vod channels.
      Environment:
        Variables:
          USERNAME_TABLE:
            Ref: UserLogins
      Events:
        Http:
          Properties:
            Method: post
            Path: /account/login
            RequestParameters:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.password:
                Required: true
          Type: Api
      Handler: login/handler.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserLogins
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  MakeTwitchWebhookSubsciption:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Make/initiate a Twitch webhook subsciption
      Environment:
        Variables:
          APPINFO_TABLE:
            Ref: AppInfo
      Events:
        Http:
          Properties:
            Method: post
            Path: /twitch/webhook
          RequestParameters:
          - method.request.querystring.topic:
              Required: true
          Type: Api
      Handler: MakeTwitchWebhookSubsciption/handler.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: AppInfo
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  ReAuthenticateTwitch:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Re-authenticate Twitch user to Twitch with refresh token (returns
        access & refresh tokens).
      Events:
        Http:
          Properties:
            Method: put
            Path: /reauth/twitch
          RequestParameters:
          - method.request.querystring.refresh_token:
              Required: true
          Type: Api
      Handler: reAuthenticateTwitch/handler.handler
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  RequestTwitchTokens:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Re-authenticate Twitch user to Twitch with authorization code (returns
        access & refresh tokens).
      Events:
        Http:
          Properties:
            Method: put
            Path: /rerequest/twitch
          RequestParameters:
          - method.request.querystring.authCode:
              Required: true
          Type: Api
      Handler: requestTwitchTokens/handler.handler
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  TwitchWebhookCallback:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Receive Twitch webhooks notifications.
      Events:
        Http:
          Properties:
            Method: post
            Path: /twitch/webhook/callback
          Type: Api
      Handler: TwitchWebhookCallback/handler.handler
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  TwitchWebhookCallbackConfirm:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Receive Twitch webhooks and confirm req.
      Events:
        Http:
          Properties:
            Method: get
            Path: /twitch/webhook/callback
          Type: Api
      Handler: TwitchWebhookCallbackConfirm/handler.handler
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  Update:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Update a specific column mentioned as a param.
      Environment:
        Variables:
          USERNAME_TABLE:
            Ref: UserLogins
      Events:
        Http:
          Properties:
            Method: put
            Path: /account/update
          RequestParameters:
          - method.request.querystring.username:
              Required: true
          - method.request.querystring.columnValue:
              Required: true
          - method.request.querystring.columnName:
              Required: true
          - method.request.querystring.authkey:
              Required: true
          Type: Api
      Handler: update/handler.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserLogins
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  UserLogins:
    Properties:
      AttributeDefinitions:
      - AttributeName: Username
        AttributeType: S
      KeySchema:
      - AttributeName: Username
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  VodChannelsFetch:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Fetch monitored vod channels list.
      Environment:
        Variables:
          USERNAME_TABLE:
            Ref: UserLogins
      Events:
        Http:
          Properties:
            Method: get
            Path: /vodchannels
            RequestParameters:
            - method.request.querystring.username:
                Required: true
            - method.request.querystring.authkey:
                Required: true
          Type: Api
      Handler: vodChannelsFetch/handler.handler
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: UserLogins
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  VodChannelsUpdate:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Update monitored vod channels list.
      Environment:
        Variables:
          USERNAME_TABLE:
            Ref: UserLogins
      Events:
        Http:
          Properties:
            Method: put
            Path: /vodchannels
          RequestParameters:
          - method.request.querystring.username:
              Required: true
          - method.request.querystring.channels:
              Required: true
          - method.request.querystring.authkey:
              Required: true
          Type: Api
      Handler: vodChannelsUpdate/handler.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserLogins
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  YoutubeFetchTokens:
    Properties:
      CodeUri: s3://aiofeed-backend/d94b9eaba862f06bc1f5f1a2a5e22322
      Description: Exchange an authorization code for an access and refresh token
      Environment:
        Variables:
          USERNAME_TABLE:
            Ref: UserLogins
      Events:
        Http:
          Properties:
            Method: post
            Path: /youtube/token
          RequestParameters:
          - method.request.querystring.authCode: null
          - method.request.querystring.username:
              Required: true
          - method.request.querystring.authkey:
              Required: true
          Type: Api
      Handler: YoutubeFetchTokens/handler.handler
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UserLogins
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
Transform: AWS::Serverless-2016-10-31
